#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьНастройки();
	Если ОтправлятьАвтоматически Тогда
		ПодключитьОбработчикАвтоматическойОтправки(Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтправлятьАвтоматическиПриИзменении(Элемент)
	ПодключитьОбработчикАвтоматическойОтправки(ОтправлятьАвтоматически);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьОтправку(Команда)
	ОтправитьДокументыВДиадок();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОтправитьДокументыВДиадок()

	//ТестовоеПриложение = Новый ТестируемоеПриложение(,1535);
	ТестовоеПриложение = Новый ТестируемоеПриложение();
	ВремяОкончанияОжидания = ТекущаяДата() + 60;
	Подключен = Ложь;
	
	ОписаниеОшибкиСоединения = "";
	
	БылиОшибкиПриОтправке = Ложь;
	
	Пока Не ТекущаяДата() >= ВремяОкончанияОжидания Цикл
		Попытка
			ТестовоеПриложение.УстановитьСоединение();
			Подключен = Истина;
			Прервать;
		Исключение
			ОписаниеОшибкиСоединения = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;
	
	Если Не Подключен Тогда
		ТестовоеПриложение = Неопределено;
		Сообщить("Не смогли установить соединение! " + Символы.ПС + ОписаниеОшибкиСоединения);
		
		ОповеститьОбОшибке(
			"Установка соединения с клиентским сеансом",
			ОписаниеОшибкиСоединения);
			
		Попытка
			ЗавершитьСеансКлиентскогоПриложения("ОтправкаДиадок");
		Исключение
		КонецПопытки;
		СообщитьВТелеграм("При отправке в Диадок не удалось установить соединение с клиентским сеансом." + Символы.ПС +
			"Осуществляется перезапуск клиентского сеанса");
		ЗапуститьСеансКлиентаТестирования(); 
		ПерезапущенКлиент = Истина;

		Возврат;
	КонецЕсли;
	
	ОткрылиОкноВыбораДопОбработки = Истина;
	Попытка
		ОкноПриложенияОсновноеКнопкаКомандногоИнтерфейсаДополнительныеОбработкиНажать(ТестовоеПриложение);
		//Пауза
		Пауза(3);
	Исключение
		ОповеститьОбОшибке(
			"Открытие списка дополнительных обработок",
			ОписаниеОшибки());
		ОткрылиОкноВыбораДопОбработки = Ложь;
		БылиОшибкиПриОтправке = Истина;
	КонецПопытки;
	
	Если ОткрылиОкноВыбораДопОбработки Тогда
		// Если открыли список доп. обработок, то далее открываем обработку обмена с Диадок
		ОткрылиОбработкуОбменаСДиадок = Истина;	
		Попытка
			ОкноПриложенияДополнительныеОбработкиПродажиКнопкаВыполнитьНажать(ТестовоеПриложение);
			//Пауза
			Пауза(30);
		Исключение
			ОповеститьОбОшибке(
				"Открытие обработки обмена с Диадок",
				ОписаниеОшибки());
			ОткрылиОбработкуОбменаСДиадок = Ложь;
			БылиОшибкиПриОтправке = Истина;
		КонецПопытки;
		
		Если ОткрылиОбработкуОбменаСДиадок Тогда
			// Если открыли обработоку обмена с Диадок, то далее открываем окно установки периода
			ОткрылиОкноВыбораПериода = Истина;	
			Попытка
				ОкноПриложенияКонтурДиадокКнопкаПоДатеДокументаНажать(ТестовоеПриложение);
				//Пауза
				Пауза(5);
			Исключение
				ОповеститьОбОшибке(
					"Открытие выбора периода",
					ОписаниеОшибки());
				ОткрылиОкноВыбораПериода = Ложь;
				БылиОшибкиПриОтправке = Истина;
			КонецПопытки;
	
			Если ОткрылиОкноВыбораПериода Тогда
				// Если открыли обработоку обмена с Диадок, то далее пытаемся установить период
				УстановилиПериод = Истина;	
				Попытка
					ОкноПриложенияДатаКнопкаПрименитьНажать(ТестовоеПриложение);
					//Пауза
					Пауза(30);
				Исключение
					ОповеститьОбОшибке(
						"Установка периода",
						ОписаниеОшибки());
					УстановилиПериод = Ложь;
					БылиОшибкиПриОтправке = Истина;
				КонецПопытки;

				Если УстановилиПериод Тогда
					// Если удалось установить период - выполняем отправку документов
					ВыполнилиОтправку = Истина;	
					Попытка
						ОкноПриложенияКонтурДиадокКнопкаПодписатьИОтправитьНажать(ТестовоеПриложение);
						//Пауза
						Пауза(10);
					Исключение
						ОповеститьОбОшибке(
							"Отправка документов",
							ОписаниеОшибки());
						ВыполнилиОтправку = Ложь;
						БылиОшибкиПриОтправке = Истина;
					КонецПопытки;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Если открывали обработку обмена с Диадок, то закрываем ее окно 
	Если ОткрылиОбработкуОбменаСДиадок = Истина Тогда
		
		Попытка
			ОкноПриложенияКонтурДиадокЗакрыть(ТестовоеПриложение);
			//Пауза
			Пауза(3);
		Исключение
			ОповеститьОбОшибке(
				"Закрытие обработки Диадок",
				ОписаниеОшибки());
				БылиОшибкиПриОтправке = Истина;
		КонецПопытки;
		
	КонецЕсли;
		
	Если ОткрылиОкноВыбораДопОбработки = Истина Тогда
	
		Попытка
			ОкноПриложенияДополнительныеОбработкиПродажиЗакрыть(ТестовоеПриложение);
		Исключение
			ОповеститьОбОшибке(
				"Закрытие окна списка доп. обработок",
				ОписаниеОшибки());
				БылиОшибкиПриОтправке = Истина;
		КонецПопытки;
	
	КонецЕсли;
	
	Если БылиОшибкиПриОтправке Тогда
		ЗакрытьОкнаКлиентскогоПриложения(ТестовоеПриложение);
		СообщитьВТелеграм("При отправке документов Диадок возникли проблемы." + Символы.ПС +
		"Закрываются активные окна клиентского приложения.");
	КонецЕсли;
	
	СообщениеВЛог("Завершение автоматической отправки в Диадок");
	
КонецПроцедуры

&НаКлиенте
Процедура ОкноПриложенияОсновноеКнопкаКомандногоИнтерфейсаДополнительныеОбработкиНажать(ТестовоеПриложение)
	
	ОкноПриложенияОсновное = Неопределено;
	КлиентсткиеОкнаТестируемогоПриложения = ТестовоеПриложение.ПолучитьПодчиненныеОбъекты();
	Для Каждого ТестируемоеОкно Из КлиентсткиеОкнаТестируемогоПриложения Цикл
		Если ТестируемоеОкно.Основное Тогда
			ОкноПриложенияОсновное = ТестируемоеОкно;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ОкноПриложенияОсновноеCommandInterface = ОкноПриложенияОсновное.ПолучитьКомандныйИнтерфейс();
	КнопкаКомандногоИнтерфейсаПродажи = ОкноПриложенияОсновноеCommandInterface.НайтиОбъект(Тип("ТестируемаяКнопкаКомандногоИнтерфейса"), "Продажи");
	КнопкаКомандногоИнтерфейсаПродажи.Нажать();

	КнопкаКомандногоИнтерфейсаДополнительныеОбработки = ОкноПриложенияОсновноеCommandInterface.НайтиОбъект(Тип("ТестируемаяКнопкаКомандногоИнтерфейса"), "Дополнительные обработки");
	КнопкаКомандногоИнтерфейсаДополнительныеОбработки.Нажать();

КонецПроцедуры

&НаКлиенте
Процедура ОкноПриложенияДополнительныеОбработкиПродажиКнопкаВыполнитьНажать(ТестовоеПриложение)

	ОкноПриложенияДополнительныеОбработкиПродажи = ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"), "Дополнительные обработки (Продажи)", , 30);
	ОкноПриложенияДополнительныеОбработкиПродажиФормаДополнительныеОбработкиПродажи = ОкноПриложенияДополнительныеОбработкиПродажи.НайтиОбъект(Тип("ТестируемаяФорма"), "Дополнительные обработки (Продажи)");
	ТаблицаТаблицаКоманд = ОкноПриложенияДополнительныеОбработкиПродажиФормаДополнительныеОбработкиПродажи.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"), , "ТаблицаКоманд");
	ОписаниеСтроки = Новый Соответствие();
	ТаблицаТаблицаКоманд.ПерейтиКСтроке(ОписаниеСтроки);

	КнопкаВыполнить = ОкноПриложенияДополнительныеОбработкиПродажиФормаДополнительныеОбработкиПродажи.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), , "ВыполнитьОбработку");
	КнопкаВыполнить.Нажать();

КонецПроцедуры

&НаКлиенте
Процедура ОкноПриложенияКонтурДиадокКнопкаПоДатеДокументаНажать(ТестовоеПриложение)
		
	ОкноПриложенияКонтурДиадок = ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"), "Контур.Диадок*", , 30);
	ОкноПриложенияКонтурДиадокФормаКонтурДиадок = ОкноПриложенияКонтурДиадок.НайтиОбъект(Тип("ТестируемаяФорма"), "Контур.Диадок*");
	КнопкаДляОтправки = ОкноПриложенияКонтурДиадокФормаКонтурДиадок.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), , "ВыбратьРежимДляОтправки");
	КнопкаДляОтправки.Активизировать();

	КнопкаДляОтправки.Нажать();

	КнопкаПоДатеДокумента = ОкноПриложенияКонтурДиадокФормаКонтурДиадок.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), , "ВыбратьПериод");
	КнопкаПоДатеДокумента.Активизировать();

	КнопкаПоДатеДокумента.Нажать();

КонецПроцедуры

&НаКлиенте
Процедура ОкноПриложенияДатаКнопкаПрименитьНажать(ТестовоеПриложение)

	ОкноПриложенияДата = ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"), "Дата", , 30);
	ОкноПриложенияДатаФормаДата = ОкноПриложенияДата.НайтиОбъект(Тип("ТестируемаяФорма"), "Дата");
	ПолеВыборПериода = ОкноПриложенияДатаФормаДата.НайтиОбъект(Тип("ТестируемоеПолеФормы"), "ВыборПериода");
	ПолеВыборПериода.ОткрытьВыпадающийСписок();

	ПолеВыборПериода.ОжидатьФормированияВыпадающегоСписка();

	ПолеВыборПериода.ВыполнитьВыборИзСпискаВыбора("День");

	ГруппаГруппаДень = ОкноПриложенияДатаФормаДата.НайтиОбъект(Тип("ТестируемаяГруппаФормы"), "Группа день");
	ГруппаГруппаДень.Активизировать();

	ПолеДень = ОкноПриложенияДатаФормаДата.НайтиОбъект(Тип("ТестируемоеПолеФормы"), "День");
	ПолеДень.Активизировать();

	ПолеДень.Выбрать();

	ПолеДень.ВвестиТекст(Строка(Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy")));
	
	КнопкаПрименить = ОкноПриложенияДатаФормаДата.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), "Применить");
	КнопкаПрименить.Нажать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОкноПриложенияКонтурДиадокКнопкаПодписатьИОтправитьНажать(ТестовоеПриложение)

	ОкноПриложенияКонтурДиадок = ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"), "Контур.Диадок*", , 30);
	ОкноПриложенияКонтурДиадокФормаКонтурДиадок = ОкноПриложенияКонтурДиадок.НайтиОбъект(Тип("ТестируемаяФорма"), "Контур.Диадок*");
	ТаблицаСписокДокументов = ОкноПриложенияКонтурДиадокФормаКонтурДиадок.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"), "Список документов");
	КнопкаВыделениеДокументов = ОкноПриложенияКонтурДиадокФормаКонтурДиадок.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), , "ВыделениеДокументов");
	КнопкаВыделениеДокументов.Нажать();
		
	//Пауза
	Пауза(5);
	
	ТаблицаСписокДокументов.ПерейтиКПервойСтроке();
	ПерваяСтрокаТаблицы = ТаблицаСписокДокументов.ПолучитьВыделенныестроки();
	Если ПерваяСтрокаТаблицы.Количество() > 0 Тогда
		
		ТаблицаСписокДокументов.ВыделитьВсеСтроки();
		ВыделенныеСтрокиДоОтправки = ТаблицаСписокДокументов.ПолучитьВыделенныестроки();
		КоличествоДокументовДоОтправки = ВыделенныеСтрокиДоОтправки.Количество();
		
		ТаблицаСписокДокументов.ПерейтиКПервойСтроке();
		
		КнопкаПодписатьИОтправить = ОкноПриложенияКонтурДиадокФормаКонтурДиадок.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), , "ВыполнитьПодписаниеИОтправку");
		КнопкаПодписатьИОтправить.Нажать();
		
		// Если удалось нажать подписать и отправить, далее подтверждаем отправку 
		Попытка
			ОкноПриложения1СПредприятиеКнопкаДаНажать(ТестовоеПриложение);
			//Пауза
			Пауза(60);
		Исключение
			ОповеститьОбОшибке(
				"Подтверждение отправки документов",
				ОписаниеОшибки());
		КонецПопытки;
		
		//Пауза
		Пауза(30);
		
		ТаблицаСписокДокументов.ВыделитьВсеСтроки();
		ВыделенныеСтрокиПослеОтправки = ТаблицаСписокДокументов.ПолучитьВыделенныестроки();
		КоличествоДокументовПослеОтправки = ВыделенныеСтрокиПослеОтправки.Количество();
		
		ТаблицаСписокДокументов.ПерейтиКПервойСтроке();
		
		СообщениеДляЛога = "Документы отправлены. Отправлялось документов " + Формат(КоличествоДокументовДоОтправки, "ЧН=0") + ", осталось после отправки: " + Формат(КоличествоДокументовПослеОтправки, "ЧН=0");
		ТелоПисьма = "";
		Если КоличествоДокументовДоОтправки > 0 Тогда
			ТелоПисьма = ТелоПисьма + "<h2>Отправлены</h2>";
			ТелоПисьма = ТелоПисьма + СформироватьHTMLТаблицуПоМассивуСоответствий(ВыделенныеСтрокиДоОтправки);
		КонецЕсли; 
		Если КоличествоДокументовПослеОтправки > 0 Тогда
			ТелоПисьма = ТелоПисьма + "<h2>НЕ отправлены</h2>";
			ТелоПисьма = ТелоПисьма + СформироватьHTMLТаблицуПоМассивуСоответствий(ВыделенныеСтрокиПослеОтправки);
		КонецЕсли; 
		
		СообщениеВЛог(СообщениеДляЛога, Истина, ТелоПисьма);
		
		Если КоличествоДокументовПослеОтправки > 0 Тогда
			КоличествоНеотправленныхСтрокой = Формат(КоличествоДокументовПослеОтправки, "ЧН=0");
			ОповеститьОбОшибке("Отправка документов", "Не отправлено документов: " + КоличествоНеотправленныхСтрокой);
			ТекстДляТелеграм = "При отправке в Диадок не удалось отправить все документы. Не отправлено " + КоличествоНеотправленныхСтрокой + ". Подробности см. в почте.";
			СообщитьВТелеграм(ТекстДляТелеграм);
		КонецЕсли; 
		
	Иначе
			
		СообщениеВЛог("Нет документов для отправки");
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОкноПриложения1СПредприятиеКнопкаДаНажать(ТестовоеПриложение)

	ОкноПриложения1СПредприятие = ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"), "1С:Предприятие", , 30);
	ОкноПриложения1СПредприятиеФорма1СПредприятие = ОкноПриложения1СПредприятие.НайтиОбъект(Тип("ТестируемаяФорма"), "1С:Предприятие");
	КнопкаДа = ОкноПриложения1СПредприятиеФорма1СПредприятие.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), "Да");
	КнопкаДа.Нажать();

КонецПроцедуры

&НаКлиенте
Процедура ОкноПриложенияКонтурДиадокЗакрыть(ТестовоеПриложение)
	ОкноПриложенияКонтурДиадок = ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"), "Контур.Диадок*", , 30);
	ОкноПриложенияКонтурДиадок.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ОкноПриложенияДополнительныеОбработкиПродажиЗакрыть(ТестовоеПриложение)
	ОкноПриложенияДополнительныеОбработкиПродажи = ТестовоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"), "Дополнительные обработки (Продажи)", , 30);
	ОкноПриложенияДополнительныеОбработкиПродажи.Закрыть();
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаписьВЖурналеРегистрации(УровеньЖР, Комментарий)
	ЗаписьЖурналаРегистрации("Диадок ЭДО (СКБ Контур)", УровеньЖР,,, Комментарий);
КонецПроцедуры

// Получает системную учётную запись, формирует список получателей, структуру письма и производит отправку.
&НаСервере
Процедура ОтправитьПисьмо(Этап, Текст, Тело = Неопределено) Экспорт

	Если Метаданные.ОбщиеМодули.Найти("РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениями = Вычислить("РаботаСПочтовымиСообщениями");
	Иначе
		Возврат;
	КонецЕсли;
	
	УчетнаяЗапись = МодульРаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(); 
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат
	КонецЕсли;
	
	ТелоПисьма = "";
	Если ЗначениеЗаполнено(Этап) Тогда
		ТелоПисьма = "<p><b>Этап:</b> " + Этап + "</p>";	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Текст) Тогда
		// Заменяем спец. символы и символы переноса строки.
		СтрокаССпецСимволами = ЗаменитьСпецСимволы(Текст);
		ТелоПисьма = ТелоПисьма + "<p>" + СтрЗаменить(СтрокаССпецСимволами, Символы.ПС, "<br/>") + "</p>";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Тело) Тогда
		ТелоПисьма = ТелоПисьма + Тело;
	КонецЕсли; 
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	МакетНастроек = ОбработкаОбъект.ПолучитьМакет("Настройки");
	
	НачалоСпискаАдресовЭП = 2; 
	МассивПолучателей = Новый Массив;
	
	Для Сч = НачалоСпискаАдресовЭП По МакетНастроек.ВысотаТаблицы Цикл
		АдресЭП = МакетНастроек.Область(Сч, 1).Текст; 
		Если ЗначениеЗаполнено(АдресЭП) Тогда
			МассивПолучателей.Добавить(АдресЭП);
		КонецЕсли;
	КонецЦикла;
	
	
	Если ЗначениеЗаполнено(МассивПолучателей) 
		И (ЗначениеЗаполнено(Этап) Или ЗначениеЗаполнено(ТелоПисьма)) Тогда
			
		Для Каждого Получатель Из МассивПолучателей Цикл
			ПараметрыСообщения = Новый Структура;
			ПараметрыСообщения.Вставить("Кому", Получатель); 																					
			ПараметрыСообщения.Вставить("Тема", "Диадок ЭДО: " + СтрокаСоединенияИнформационнойБазы()); 	
			ПараметрыСообщения.Вставить("Тело", ТелоПисьма); 	   																				
			ПараметрыСообщения.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.HTML);                    	   					
			
			Попытка
				НовоеПисьмо = МодульРаботаСПочтовымиСообщениями.ПодготовитьПисьмо(УчетнаяЗапись, ПараметрыСообщения);
				МодульРаботаСПочтовымиСообщениями.ОтправитьПисьмо(УчетнаяЗапись, НовоеПисьмо);
			Исключение
				Сообщить(ОписаниеОшибки());
				СоздатьЗаписьВЖурналеРегистрации(
					УровеньЖурналаРегистрации.Ошибка,
					"Ошибка отправки электронного письма: " + ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОповеститьОбОшибке(Этап, ТекстОшибки = Неопределено, Тело = Неопределено)
	СоздатьЗаписьВЖурналеРегистрации(
		УровеньЖурналаРегистрации.Ошибка,
		Этап + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС + ТекстОшибки, ""));
	
	ОтправитьПисьмо(Этап, ТекстОшибки, Тело);
КонецПроцедуры

&НаСервере
Процедура СообщениеВЛог(Информация, ОповеститьПочтой = Ложь, Тело = Неопределено)
	Сообщить(Информация);
	
	СоздатьЗаписьВЖурналеРегистрации(
		УровеньЖурналаРегистрации.Информация,
		Информация);
		
	Если ОповеститьПочтой Тогда
		ОтправитьПисьмо("", Информация, Тело);
	КонецЕсли;
КонецПроцедуры

// Заменяет специальные символы на символы HTML формата.
// 
// Параметры:
// ОбрабатываемаяСтрока - Строка - содержит сформированный HTML-текст.
// 
// Возвращаемое значение:
// - Строка.
Функция ЗаменитьСпецСимволы(ОбрабатываемаяСтрока)
	Строка = СтрЗаменить(ОбрабатываемаяСтрока, "&", "&amp;");
	Строка = СтрЗаменить(Строка, """", "&quot;"); 
	Строка = СтрЗаменить(Строка, "<", "&lt;");
	Строка = СтрЗаменить(Строка, ">", "&gt;");
	Строка = СтрЗаменить(Строка, "‘", "&apos;");
	
	Возврат Строка;
КонецФункции

&НаКлиенте
Процедура Пауза(ЗадержкаСекунд)
	Скрипт = Новый ТекстовыйДокумент(); 
	Скрипт.УстановитьТекст 
	( 
	"if (WScript.Arguments.Count()==0) 
	| WScript.Quit(); 
	|else 
	| if (isNaN(parseInt(WScript.Arguments(0)))) 
	| WScript.Quit(); 
	|WScript.Sleep(WScript.Arguments(0));" 
	); 
	Скрипт.Записать(КаталогВременныхФайлов()+"sleep.js", КодировкаТекста.ANSI); 
	WshShell = Новый COMОбъект("wscript.shell"); 
	WshShell.Run("wscript.exe """+КаталогВременныхФайлов()+"sleep.js"" "+Формат(ЗадержкаСекунд*1000,"ЧГ=0"), 0, -1); 
	УдалитьФайлы(КаталогВременныхФайлов()+"sleep.js");
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикАвтоматическойОтправки(Подключить)
	Если Подключить И ЗначениеЗаполнено(ИнтервалОтправки) Тогда
		ИнтервалОтправкиВМинутах = ИнтервалОтправки * 60; 
		ПодключитьОбработчикОжидания("ОбработчикАвтоматическойОтправки", ИнтервалОтправкиВМинутах, Ложь);
	Иначе
		ОтключитьОбработчикОжидания("ОбработчикАвтоматическойОтправки");
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикАвтоматическойОтправки()
	
	Если ТекущееВремяВходитВНастройкуИнтервалаАвтоматическойОтправки() Тогда
		ОтправитьДокументыВДиадок();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТекущееВремяВходитВНастройкуИнтервалаАвтоматическойОтправки()
	
	ТекДата = ТекущаяДата();
	ТекущееВремя = '00010101' + (ТекДата - НачалоДня(ТекДата));
		
	Если ТекущееВремя >= ВремяНачала
		И ТекущееВремя <= ВремяОкончания Тогда
		Возврат Истина;	
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция СформироватьHTMLТаблицуПоМассивуСоответствий(МассивСоответствий)
	
	Если Не ЗначениеЗаполнено(МассивСоответствий) Тогда
		Возврат "";
	КонецЕсли; 
	
	МассивКолонок = Новый Массив;
	
	Соотв = МассивСоответствий[0];
	Результат = 
	"<table border=""1"">
	|<tr>";
	Для каждого КлючЗначение Из Соотв Цикл
		ИмяКолонки = КлючЗначение.Ключ;
		Если ИмяКолонки = "Вкл"
			ИЛИ ИмяКолонки = "Сумма НДС" 
			ИЛИ ИмяКолонки = "В подразделение"
			ИЛИ ИмяКолонки = "Доп. сведения" Тогда
			Продолжить;
		КонецЕсли; 
		МассивКолонок.Добавить(ИмяКолонки);
		Результат = Результат + Символы.ПС + "<th>" + ИмяКолонки + "</th>";
	КонецЦикла; 
	
	Результат = Результат + "
	|</tr>";
	
	Для каждого Соотв Из МассивСоответствий Цикл
		Результат = Результат + "
		|<tr>";
		
		Для каждого ИмяКолонки Из МассивКолонок Цикл
			ЗначениеКолонки = Соотв.Получить(ИмяКолонки);
			Если ЗначениеЗаполнено(ЗначениеКолонки) Тогда
				ЗначениеКолонки = ЗаменитьСпецСимволы(ЗначениеКолонки);
			Иначе
				ЗначениеКолонки = "&nbsp;";
			КонецЕсли; 
			Результат = Результат + Символы.ПС + "<td>" + ЗначениеКолонки + "</td>";
		КонецЦикла; 
		
		Результат = Результат + "
		|</tr>";
	КонецЦикла; 
	
	Результат = Результат +
	"</table>";
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗавершитьСеансКлиентскогоПриложения(ИмяУдаляемогоПользователя = "")
	Если Найти(СтрокаСоединенияИнформационнойБазы(), "Srvr") > 0 Тогда
		// серверный вариант
		Поиск1 = Найти(СтрокаСоединенияИнформационнойБазы(), "Srvr=");
		ПодстрокаПоиска = Сред(СтрокаСоединенияИнформационнойБазы(), Поиск1 + 6);
		ИмяСервера = Лев(ПодстрокаПоиска, Найти(ПодстрокаПоиска, """") - 1);
		// теперь ищем имя базы
		Поиск1 = Найти(СтрокаСоединенияИнформационнойБазы(), "Ref=");
		ПодстрокаПоиска = Сред(СтрокаСоединенияИнформационнойБазы(), Поиск1 + 5);
		ИмяБазы = Лев(ПодстрокаПоиска, Найти(ПодстрокаПоиска, """") - 1);
	Иначе
		// для других способов подключения алгоритм не актуален
		Возврат;
	КонецЕсли;
	
	Коннектор = Новый COMОбъект("v83.COMConnector");
	Агент = Коннектор.ConnectAgent(ИмяСервера);
	Кластеры = Агент.GetClusters();
	Для каждого Кластер из Кластеры Цикл
		//АдминистраторКластера = "Имя администратора кластера";
		//ПарольКластера = "Пароль администратора кластера";
		//Агент.Authenticate(Кластер, АдминистраторКластера, ПарольКластера);
		Агент.Authenticate(Кластер,,);
		Процессы = Агент.GetWorkingProcesses(Кластер);
		Для каждого Процесс из Процессы Цикл
			Порт = Процесс.MainPort;
			// теперь есть адрес и порт для подключения к рабочему процессу
			РабПроц = Коннектор.ConnectWorkingProcess(ИмяСервера + ":" + СтрЗаменить(Порт, Символы.НПП, ""));
			РабПроц.AddAuthentication("admin", "pass");
			
			ИнформационнаяБаза = "";
			
			Базы = Агент.GetInfoBases(Кластер);
			Для каждого База из Базы Цикл
				Если База.Name = ИмяБазы Тогда
					ИнформационнаяБаза = База;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ИнформационнаяБаза = "" Тогда
				// база не найдена
			КонецЕсли;
			
			Сеансы = Агент.GetInfoBaseSessions(Кластер, ИнформационнаяБаза);
			Для каждого Сеанс из Сеансы Цикл
				
				Если нРег(Сеанс.AppID) = "backgroundjob" ИЛИ нРег(Сеанс.AppID) = "comconsole"
						ИЛИ нРег(Сеанс.AppID) = "designer" Тогда
					// если это сеансы com-приложения или фонового задания, то не отключаем
					Продолжить;
				КонецЕсли;
				Если Сеанс.UserName = ИмяПользователя() Тогда
					// это текущий пользователь
					Продолжить;
				КонецЕсли; 
				
				// Удаление сеанса конкретного пользователя
				Если ЗначениеЗаполнено(ИмяУдаляемогоПользователя) И Сеанс.UserName <> ИмяУдаляемогоПользователя Тогда
					Продолжить;
				КонецЕсли;

				Агент.TerminateSession(Кластер, Сеанс);
				Сообщить("Отключен сеанс "+строка(Сеанс.UserName));
			КонецЦикла;
			
			//ИнформационнаяБаза2 = РабПроц.CreateInfoBaseInfo();
			//ИнформационнаяБаза2.Name = ИмяБазы;
			////СоединенияБазы = РабПроц.GetInfoBaseConnections(ИнформационнаяБаза2);
			//СоединенияБазы = Агент.GetInfoBaseConnections(Кластер, ИмяБазы);
			// //Разорвать соединения клиентских приложений.
			//Для Каждого Соединение Из СоединенияБазы Цикл
			//	Если нРег(Соединение.AppID) = "backgroundjob" ИЛИ нРег(Соединение.AppID) = "comconsole"
			//			ИЛИ нРег(Сеанс.AppID) = "designer" Тогда
			//		Продолжить;
			//	КонецЕсли;
			//	Если Соединение.UserName = ИмяПользователя() Тогда
			//		// это текущий пользователь
			//		Продолжить;
			//	КонецЕсли;
			//	РабПроц.Disconnect(Соединение);
			//КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры  

&НаКлиенте
Процедура ЗакрытьОкнаКлиентскогоПриложения(ТестовоеПриложение)
	Пока Истина Цикл
		АктивноеОкно = ТестовоеПриложение.ПолучитьАктивноеОкно();
		ФормаОкна = АктивноеОкно.НайтиОбъект(Тип("ТестируемаяФорма"));
		КнопкаОК = ФормаОкна.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), "ОК");
		Если КнопкаОК <> Неопределено Тогда
			КнопкаОК.Активизировать();
			КнопкаОК.Нажать();
			Продолжить;
		КонецЕсли; 
		КнопкаЗавершить = ФормаОкна.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), "Закрыть");
		Если КнопкаЗавершить <> Неопределено Тогда
			КнопкаЗавершить.Активизировать();
			КнопкаЗавершить.Нажать();
			Продолжить;
		КонецЕсли;
		Если АктивноеОкно.НачальнаяСтраница Тогда
			Прервать;	
		КонецЕсли; 
		АктивноеОкно.Закрыть();
	КонецЦикла; 		
КонецПроцедуры
 
&НаКлиенте
Процедура СообщитьВТелеграм(ТекстСообщения)
	Если Не ЗначениеЗаполнено(ТокенБота) Тогда
		Возврат;
	КонецЕсли;
	
	Соединение  =  Новый HTTPСоединение("api.telegram.org", 443,,,,, Новый ЗащищенноеСоединениеOpenSSL());
	ОтправкаЗапрос = "bot" + ТокенБота + "/sendMessage?chat_id=" + IDЧата + "&text=" + ТекстСообщения;
	Запрос = Новый HTTPЗапрос(ОтправкаЗапрос);
	Соединение.Получить(Запрос);
КонецПроцедуры

#КонецОбласти

#Область ПереопределяемыеНастройки

&НаКлиенте
Процедура УстановитьНастройки()
	ТокенБота = ""; // токен телеграм бота для оповещений
	IDЧата = ""; // Ид чата для телеграм бота для оповещений
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьСеансКлиентаТестирования()
	//Здесь должен быть код запука базы в режиме клиента тестирования
	//КомандаСистемы("C:\...\start1cClient.cmd");	
КонецПроцедуры  

#КонецОбласти
